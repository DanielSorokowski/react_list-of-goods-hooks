{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","isSorted","renderedGoods","goods","visibleGoods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","sortBy","className","type","onClick","prevState","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAwCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAWF,IAAaP,EAASM,KACjCI,EAjCD,SACLC,EADK,GAGJ,IADCJ,EACF,EADEA,SAAUH,EACZ,EADYA,WAENQ,EAAY,YAAOD,GAsBzB,OApBAC,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQR,GACN,KAAKP,EAASgB,SACZ,OAAOF,EAAEG,cAAcF,GAGzB,KAAKf,EAASkB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAGtB,QACE,OAAO,MAKTf,GACFQ,EAAaQ,UAGRR,EAOeS,CACpBpB,EACA,CAAEG,aAAYG,aAGVM,EAAO,SAACS,GACZd,EAAYc,IAYd,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAoBhB,IAAaP,EAASgB,UAAY,YAC/DS,QAAS,WACPZ,EAAKb,EAASgB,WAJlB,iCAUA,wBACEQ,KAAK,SACLD,UAAS,4BAAuBhB,IAAaP,EAASkB,QAAU,YAChEO,QAAS,WACPZ,EAAKb,EAASkB,SAJlB,4BAUA,wBACEM,KAAK,SACLD,UAAS,6BAAwBnB,GAAc,YAC/CqB,QAnCQ,WACdpB,GAAc,SAAAqB,GAAS,OAAKA,MA+BxB,sBAQEjB,GAAYL,IAEV,wBACEoB,KAAK,SACLD,UAAU,4BACVE,QAzCE,WACZpB,GAAc,GACdG,EAAYR,EAASM,OAoCb,sBAUN,6BACE,6BACGI,EAAciB,KAAI,SAAAC,GAAI,OACrB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,cC1HpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6c7aadc2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case SortType.ALPHABET: {\n        return a.localeCompare(b);\n      }\n\n      case SortType.LENGTH: {\n        return a.length - b.length;\n      }\n\n      default: {\n        return 0;\n      }\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const isSorted = sortType !== SortType.NONE;\n  const renderedGoods = getReorderedGoods(\n    goodsFromServer,\n    { isReversed, sortType },\n  );\n\n  const sort = (sortBy: SortType) => {\n    setSortType(sortBy);\n  };\n\n  const reverse = () => {\n    setIsReversed(prevState => !prevState);\n  };\n\n  const reset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType !== SortType.ALPHABET && 'is-light'}`}\n          onClick={() => {\n            sort(SortType.ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType !== SortType.LENGTH && 'is-light'}`}\n          onClick={() => {\n            sort(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${!isReversed && 'is-light'}`}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(isSorted || isReversed)\n          && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        <ul>\n          {renderedGoods.map(good => (\n            <li data-cy=\"Good\" key={good}>{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}